name: Docker Build CI - RMikrotik

on:
  push:
    branches:
      - master

jobs:
  build-astro:
    name: Build Front-End (Astro)
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: front-end

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Verificar cambios en front-end
        id: check-frontend
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend: 
              - 'front-end/**'

      # - name: Salir si no hay cambios en front-end
      #   if: steps.check-frontend.outputs.frontend == 'false'
      #   run: echo "Sin cambios en front-end. Saliendo."

      - name: Crear archivo .env
        # if: steps.check-frontend.outputs.frontend == 'true'
        run: |
          cat > front-end/.env <<EOL
          HOST="${{secrets.HOST}}"
          PUBLIC_BASE_URL_API="${{secrets.PUBLIC_BASE_URL_API}}"

          GITHUB_CLIENT_ID="${{secrets._GITHUB_CLIENT_ID}}"
          GITHUB_CLIENT_SECRET="${{secrets._GITHUB_CLIENT_SECRET}}"

          GOOGLE_CLIENT_ID="${{secrets.GOOGLE_CLIENT_ID}}"
          GOOGLE_CLIENT_SECRET="${{secrets.GOOGLE_CLIENT_SECRET}}"

          AUTH_SECRET="${{secrets.AUTH_SECRET}}"
          AUTH_TRUST_HOST="${{secrets.AUTH_TRUST_HOST}}"
          EOL

      - name: Verificar archivo .env
        # if: steps.check-frontend.outputs.frontend == 'true'
        run: cat front-end/.env

      - name: Construyendo contenedor Astro JS
        # if: steps.check-frontend.outputs.frontend == 'true'
        run: docker compose -f front-end/docker-compose.build.yml build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Tag front-end image
        run: docker tag front-end-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rmikrotik/front-end-app:latest

      - name: Push front-end image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rmikrotik/front-end-app:latest

  deploy-front:
    name: Deploy Front-End (Astro) en servidor
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    needs: build-astro

    environment: front-end

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Descargar imagen desde ECR
        run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rmikrotik/front-end-app:latest

      - name: Crear y ejecutar contenedor en producción
        run: docker compose -f front-end/docker-compose.prod.yml up -d
      
      - name: Eliminar imágenes locales
        run: docker image prune -af || true

  build-spring-boot:
    name: Build Back-End (Spring Boot)
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: back-end

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Verificar cambios en back-end
        id: check-backend
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend: 
              - 'back-end/**'

      # - name: Salir si no hay cambios en back-end
      #   if: steps.check-backend.outputs.backend == 'false'
      #   run: echo "Sin cambios en back-end. Saliendo."

      - name: Crear archivo application.properties
        # if: steps.check-backend.outputs.backend == 'true'
        run: |
          cat > back-end/src/main/resources/application.properties <<EOL
          server.port=${{secrets.SERVER_PORT}}
          spring.application.name=${{secrets.SPRING_APPLICATION_NAME}}
          spring.server.type=${{secrets.SPRING_SERVER_TYPE}}
          spring.mvc.throw-exception-if-no-handler-found=${{secrets.SPRING_MVC_THROW_EXCEPTION_IF_NO_HANDLER_FOUND}}
          spring.web.resources.add-mappings=${{secrets.SPRING_WEB_RESOURCES_ADD_MAPPINGS}}

          spring.datasource.url=${{secrets.SPRING_DATASOURCE_URL}}
          spring.datasource.username=${{secrets.SPRING_DATASOURCE_USERNAME}}
          spring.datasource.password=${{secrets.SPRING_DATASOURCE_PASSWORD}}
          spring.datasource.driver-class-name=${{secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME}}

          spring.jpa.database-platform=${{secrets.SPRING_JPA_DATABASE_PLATFORM}}
          spring.jpa.hibernate.ddl-auto=${{secrets.SPRING_JPA_HIBERNATE_DDL_AUTO}}
          spring.jpa.show-sql=${{secrets.SPRING_JPA_SHOW_SQL}}
          spring.jpa.properties.hibernate.format_sql=${{secrets.SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL}}

          paypal.url=${{secrets.PAYPAL_URL}}
          paypal.client.id=${{secrets.PAYPAL_CLIENT_ID}}
          paypal.client.secret=${{secrets.PAYPAL_CLIENT_SECRET}}

          culqi.url.token=${{secrets.CULQI_URL_TOKEN}}
          culqi.url.charges=${{secrets.CULQI_URL_CHARGES}}
          culqi.public.key=${{secrets.CULQI_PUBLIC_KEY}}
          culqi.private.key=${{secrets.CULQI_PRIVATE_KEY}}

          url.front.end=${{secrets.URL_FRONT_END}}
          EOL

      - name: Verificar archivo application.properties
        # if: steps.check-backend.outputs.backend == 'true'
        run: cat back-end/src/main/resources/application.properties

      - name: Construyendo contenedor Spring Boot
        # if: steps.check-backend.outputs.backend == 'true'
        run: docker compose -f back-end/docker-compose.build.yml build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag back-end image
        run: docker tag back-end-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rmikrotik/back-end-app:latest

      - name: Push back-end image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rmikrotik/back-end-app:latest

  deploy-spring-boot:
    name: Deploy Back-End en servidor
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    needs: build-spring-boot

    environment: back-end

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Descargar imagen desde ECR
        run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rmikrotik/back-end-app:latest

      - name: Crear y ejecutar contenedor en producción
        run: docker compose -f back-end/docker-compose.prod.yml up -d

      - name: Eliminar imágenes locales
        run: docker image prune -af || true

  clean-ecr-images:
    name: Borrar imágenes antiguas de ECR
    runs-on: ubuntu-latest
    needs: [build-astro, build-spring-boot]
    steps:
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Instalar jq
        run: sudo apt-get install -y jq

      - name: Borrar imágenes sin tag 'latest' - Frontend
        run: |
          REPO="rmikrotik/front-end-app"

           # 1. Obtener todas las imágenes (excepto latest)
            aws ecr list-images --repository-name $REPO \
              --query 'imageIds[?type(imageTag)==`null` || imageTag!=`latest`]' \
              --output json > images.json

            # 2. Verificar si hay imágenes para borrar
            if [ $(jq -e 'length > 0' images.json) = "true" ]; then
              echo "Borrando $(jq length images.json) imágenes antiguas..."
              aws ecr batch-delete-image --repository-name $REPO --image-ids file://images.json
            else
              echo "No hay imágenes antiguas para borrar en $REPO"
            fi

      - name: Borrar imágenes sin tag 'latest' - Backend
        run: |
          REPO="rmikrotik/back-end-app"

            # 1. Obtener todas las imágenes (excepto latest)
            aws ecr list-images --repository-name $REPO \
              --query 'imageIds[?type(imageTag)==`null` || imageTag!=`latest`]' \
              --output json > images.json

            # 2. Verificar si hay imágenes para borrar
            if [ $(jq -e 'length > 0' images.json) = "true" ]; then
              echo "Borrando $(jq length images.json) imágenes antiguas..."
              aws ecr batch-delete-image --repository-name $REPO --image-ids file://images.json
            else
              echo "No hay imágenes antiguas para borrar en $REPO"
            fi
      